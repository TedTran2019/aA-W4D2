index.html.erb
View that is rendered inside index action!
render :index or 'index' -> in BooksController -> views/books/index.html.erb
Instance variable in Controller == can use in view 
erb = embedded Ruby

<% ruby code not printed %> er tab
<%= ruby code to render %> pe tab
https://marketplace.visualstudio.com/items?itemName=ZneuRay.erb-vscode-snippets
pc tab -> erb comment
if/ife/else/elsif/unless/end tab
st tab -> submit tag
tft tab -> textfield tag
pft tab -> password field tag
lblt tab -> label tag
lt tab -> link to
each tab -> each
ff tab -> form
t tab -> t() helper
application.html.erb -> yield -> template

Can just write, let it autocomplete, then click down and tab to choose what 
is needed!

If you're in a show method and try to render index template, it won't have the 
proper instance variables. redirect instead! 
Use redirect_to (a url_helper)

Remember that neither redirect or render are equiv. to return!

action -> URL (Can just use url_helper)
method -> HTTP METHOD

debugger -> look in server log -> c to continue

Remember labels, ids for input, and in names-- make sure to nest.

<option disabled> -> not valid -> <selected> makes it default

input type = "date" is pretty cool! Different input types...

Entire video about partials --> Look in previous notes!
Partials indicated with _, rendered within another template.
In template, render partial without the underscore and pass in the instance var.
1. action 
2. hidden input
3. pre-filled values (Send in dummy book, so all default to nil)
4. submit button

If you do render @thing, it'll be automatically do the @thing.each do |thing|, 
render thing by using _thing.html.erb.

Routing errors -> what routes were you trying to go to and why?
Check server log!
To debug a controller, use the keyword "fail" if not debugger and such

In partials, pass local instead of using instance variables

Logic in controller, display in views!

Some helper methods: link_to, button_to
link_to 'Link name', link_url
button_to 'Button name', url, HTTP method

POST/PATCH/DELETE - use a button 
a tag for GET requests

Always look at the HTML generated by helper methods and know how to write them 
yourself.

Parameters in query string can be done as well, xyz_url(key: :value)

Rails parameter conventions!
To build an array, append an empty set of square brackets to the 
name. Ex. person[phone_numbers][]

No arrays of hashes! Must do a trick like persons[0][phone_number],
persons[1][phone_number, etc]

binding_of_caller and better_errors are to debug controllers -> use fail to step 
into controller

Check params, try #save, #valid?, #errors.full_messages, is current_user 
working?, instance variables set correctly, permit on params, associations are 
correct, etc...

.where and .where.not to deal with SQL ternary logic

radio buttons with same name! -> only pick 1
label for and input id are connected

Always think about how to clean up erb files!

Learning Goals
Be able to build a model with validations and default values
Know how to build Rails views for new and edit forms
Know how to use a hidden field to set the form's method
Be able to separate the form out into a partial that both forms use
Be able to show data and actions based on the form's type
Know how to use select and input HTML elements
Be able to add methods to a Rails model

Think about redirect and render!
Redirect -> Call another method thus going through all logic 
Render -> only rendering view
Think about the URL, if logic needs to be done, instance variables, etc.

Name == radio button identification to pick 1 
Name == what the HTML form sends back, so nest for mass assignment
for and id tags are connected! How labels relate to input.

A gotcha: You need "" around all Ruby inserted things if you want it to not 
break HTML code.
Ie. if you want selected, don't include "" around. 
If you want "selected", include "" around the <% %>
String "selected" in Ruby will be selected in HTML, so you need to add or not 
add surrounding "" based on the situation.

For some reason, in the form action, it's <%= %>... despite it not being 
displayed anywhere on the page? Otherwise it doesn't work.
Apparently, all values need the <%= %>, if you use just <% %>. nothing will 
happen. I guess it'll be considered invisible Ruby code. 

That makes sense.
<%= %> - Any code that you would write in HTML, even if it doesn't display on page 
<% %> - Ruby code

Basically nearly all your errors had to do with how <%=%> and <%%> tags were used, 
along with what to cover with "".

In ActiveRecord, the .or for where makes a ( ), it's useful as hell.

Interpolation with #{} doesn't always work for some reason.
Try symbol : etc or ?.

Transaction -> all succeed or rollback! ActiveRecord class.transaction do... w/e

When in doubt, make the HTML yourself.

What stumped you was the button_to not workign at all for some odd reason, 
mistakes with approve and deny (denying all n' stuff), and some really dumb 
small mistakes. I guess knowing how to debug is vastly important for saving time, 
otherwise you'll waste lots of time on small errors.
